[{"D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\index.tsx":"1","D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\App.tsx":"2","D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Controls\\Controls.tsx":"3","D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Entries\\Entries.tsx":"4","D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Pagination\\Pagination.tsx":"5","D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Info\\Info.tsx":"6","D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Utils\\handlePathname.ts":"7","D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Entries\\EntriesItem\\EntriesItem.tsx":"8"},{"size":312,"mtime":1609416093196,"results":"9","hashOfConfig":"10"},{"size":10489,"mtime":1609423106481,"results":"11","hashOfConfig":"10"},{"size":3379,"mtime":1609414440367,"results":"12","hashOfConfig":"10"},{"size":1823,"mtime":1609760855220,"results":"13","hashOfConfig":"10"},{"size":2368,"mtime":1609760869999,"results":"14","hashOfConfig":"10"},{"size":1099,"mtime":1608841232336,"results":"15","hashOfConfig":"10"},{"size":348,"mtime":1609414423080,"results":"16","hashOfConfig":"10"},{"size":1327,"mtime":1609759342061,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"krsnxr",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\index.tsx",[],["36","37"],"D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\App.tsx",["38","39"],"import React from 'react';\nimport './App.css';\n\nimport { useState, useEffect } from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Info from './Info/Info';\n\nimport Controls from './Controls/Controls';\nimport Entries from './Entries/Entries';\nimport Pagination from './Pagination/Pagination';\n\nconst REQUEST_URL = 'http://localhost:8081/api/entries';\nconst REQUEST_URL_CHECKED = 'http://localhost:8081/api/entries-checked';\n\ninterface Entrie {\n  id: number,\n  content: string,\n  checked: boolean\n}\n\ninterface PaginationEntrie {\n  start: number,\n  end: number\n}\n\nconst App: React.FunctionComponent = (props) => {\n  const [entries, setEntries] = useState <Entrie[]> ([]);\n  const [entriesChecked, setEntriesChecked] = useState <Entrie[]> ([]);\n  const [pagination, setPagination] = useState <PaginationEntrie> ({ start: 0, end: 5 });\n\n  // Функция handleError(err: any) получает в качетсве\n  // аргумента объект ошибки и выводит в консоль \n  // данные о ней\n  const handleError = (err: any): void => {\n    console.error(err.message);\n    console.log(err);\n  }\n\n  // ------------------------------------------------------------------------\n  // Функция getEntries(url : String)\n  // принимает в качестве аргумента строку URL \n  // и делает запрос на сервер, после чего\n  // с помощью функцияя setEntries(<Array>)\n  // выставляет полученный массив записей в состояние entries.\n\n  const getEntries = async (url: string) => {\n    try {\n      const response = await fetch(url);\n      const result = await response.json();\n\n      setEntries(result);\n    } catch (err) {\n      handleError(err);\n    }\n  }\n  \n  // ------------------------------------------------------------------------\n  // useEffect вызывает функцию\n  // getEntries(url : String) при рендеринге страницы.\n\n  useEffect(() => {\n    getEntries(REQUEST_URL);\n  }, []);\n\n  // ------------------------------------------------------------------------\n  // Функция getId(arr : any[]) возвращает порядковый номер записи\n  // getId принимает в качестве аргумента массив, на основе которого\n  // возвращает инкрементированый id типа number последнего элемента.\n\n  const getId = (arr: any[]): number => (arr.length !== 0) ? arr[arr.length - 1].id + 1 : 0;\n\n  // ------------------------------------------------------------------------\n  // Функция creqteEntrieFunc(entrie: string, entries: any[]): Entrie принимает\n  // в качестве аргументов строку entrie(что получаем из input) и массив записей entries\n  // после чего возвращает объект с полями id, content, checked, где id является \n  // результатом вызова фукции getId(entries)\n\n  const createEntrieFunc = (entrie: string, entries: any[]): Entrie => {\n    return {\n      id: getId(entries),\n      content: entrie,\n      checked: false,\n    };\n  }\n\n  // ------------------------------------------------------------------------\n  // Функция setEntrieOnServer(url: string, entries: Entrie) создаёт новую запись в DB\n\n  const setEntrieOnServer = async (url : string, entrie: Entrie) => {\n    const options = {\n      method: 'POST',\n      headers: { 'Content-Type' : 'application/json' },\n      body: JSON.stringify(entrie)\n    };\n\n    try {\n      await fetch(url, options);\n    \n    } catch (err) {\n      handleError(err);\n    } \n  }\n\n  // ------------------------------------------------------------------------\n  // Функция addHandle(entrie: string) принимает в качестве аргумента строку.\n  // Клонирует массив entries и создаёт объект createEntrie\n  // на основе полученных данных с поля ввода\n  // и функции createEntrieFunc(entrie: Entrie, entries: any[])\n  // После чего объединяет копию массива и новые данные\n  // а затем выставляет новый массив записей в state\n  // при помощи функции setEntries(<any[]>)\n  // и создаёт новую запись в DB при помощи setEntrieOnSrver(url: string, createEntrie: Entrie).\n\n  const addHandle = (entrie: string): void => {\n    let cloneEntries: any[] = [...entries];\n    let createEntrie: Entrie = createEntrieFunc(entrie, entries);\n\n    cloneEntries = cloneEntries.concat([], createEntrie);\n    \n    setEntries(cloneEntries);\n    setEntrieOnServer(REQUEST_URL, createEntrie);\n  }\n\n  // ------------------------------------------------------------------------\n  // Функция deleteEntrieFromServer(id: number) в качестве аргумента принимает id\n  // и делавет запрос к DB и удаляет запись соответствующую id\n\n  const deleteEntrieFromServer = async (id: number) => {\n    const deleteURL: string = `${REQUEST_URL}/${id}`;\n    \n    try {\n      await fetch(deleteURL, { method: 'DELETE' });\n\n    } catch (err) {\n      handleError(err);\n    }\n  }\n\n  // ------------------------------------------------------------------------\n  // Функция deleteHandle(id: number) в качетве аргумента принимает id \n  // и удаляет соответствующее представление\n\n  const deleteHandle = (id: number): void => {\n    let cloneEntries: Entrie[], filterEntries: Entrie[], filterCheckedEntries: Entrie[];\n\n    cloneEntries = [...entries];\n    filterEntries = cloneEntries.filter(item => item.id !== id);\n    filterCheckedEntries = cloneEntries.filter(item => item.id !== id && item.checked === true);\n    \n    setEntries(filterEntries);\n    setEntriesChecked(filterCheckedEntries);\n    deleteEntrieFromServer(id);\n  }\n\n  // ------------------------------------------------------------------------\n  // Функция checkedEntrieOnServer (id: number, entrie: Entrie) \n  // принимает в качестве аргумента id записи и саму изменяемую запись entrie \n  // и на основе полученных данных делает (PATCH) запрос к DB\n\n  const checkedEntrieOnServer = async (id: number, entrie: Entrie) => {\n    const CHECKED_URL: string = `${REQUEST_URL}/${id}`;\n    const OPTIONS = { \n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        id: entrie.id,\n        content: entrie.content,\n        checked: entrie.checked,\n      }) \n    }\n\n    try {\n      await fetch(CHECKED_URL, OPTIONS);\n\n    } catch (err) {\n      handleError(err);\n    }\n  }\n\n  // ------------------------------------------------------------------------\n  // Функция checkedHandle(id: number) принимает в качестве атрибута id записи\n  // создаёт копию массива entries выбирает запись этого массива, \n  // которая соответствует id и выставляет свойство checked(true || false)\n  // С помощью функции checkedEntrieOnServer(id, entrie) делает (PATCH) запрос к DB\n  \n  const checkedHandle = (id: number): void => {\n    let cloneEntries: any[], cloneEntriesChecked: any[], selectedEntrie: Entrie;\n    \n    cloneEntries = [...entries];\n    cloneEntries.map(item => item.id === id ? item.checked = !item.checked : item);\n    \n    cloneEntriesChecked = [...entriesChecked];\n    cloneEntriesChecked = cloneEntries.filter((item, i) => {\n      if (item.checked === true || item.checked === 1) {\n          return item;\n      }\n    });\n\n    setEntries(cloneEntries);\n    setEntriesChecked(cloneEntriesChecked);\n\n    selectedEntrie = cloneEntries.find(item => item.id === id);\n    \n    checkedEntrieOnServer(id, selectedEntrie);\n  }\n\n  // ------------------------------------------------------------------------\n  // Функция handlePagination(start: number, end: number) принимает в качестве \n  // аргумента два числа start и end, где start 1-й элемент на странице и end \n  // соответственно замыкающий и выставляет state на основе полученных данных\n\n  const handlePagination = (start: number, end: number) => {\n    let clonePagination = {...pagination};\n\n    clonePagination.start = start;\n    clonePagination.end = end;\n\n    setPagination(clonePagination);\n  }\n\n\n  // ------------------------------------------------------------------------\n  // Функция getCheckedEntries делает (GET)запрос к DB и получает все записи,\n  // которые были отмечены, как выполненно.\n  // И выставляет их в state при помощи функции setEntrieChecked\n\n  const getCheckedEntries = async () => {\n    const response = await fetch(REQUEST_URL_CHECKED);\n    const result = await response.json();\n\n    setEntriesChecked(result);\n  }\n\n  // ------------------------------------------------------------------------\n  // useEffect вызывает функцию\n  // getCheckedEntries(url : String) при рендеринге страницы.\n\n  useEffect(() => {\n    getCheckedEntries();\n  }, [])\n\n  return (\n    <>\n      <div className=\"container\">\n        <Controls onAdd={addHandle} onPagination={handlePagination}/>\n\n        {/* INFO PAGE */}\n        <Route exact path=\"/\">\n          <Info />\n        </Route>\n\n        {/* ENTRIES PAGE */}\n        <Route path=\"/entries\">\n          <Entries onDelete={deleteHandle} onChecked={checkedHandle} pagination={pagination} entries={entries}/>\n          <Pagination onPagination={handlePagination} entries={entries}/>\n        </Route>\n\n        {/* COMPLITE ENTRIES PAGE */}\n        <Route path=\"/entries-checked\">\n          <Entries onDelete={deleteHandle} onChecked={checkedHandle} pagination={pagination} entries={entriesChecked}/>\n          <Pagination onPagination={handlePagination} entries={entriesChecked}/>\n        </Route>        \n      </div>\n    </>\n  );\n}\n\nexport default App;\n","D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Controls\\Controls.tsx",[],"D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Entries\\Entries.tsx",["40","41","42"],"D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Pagination\\Pagination.tsx",["43","44"],"D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Info\\Info.tsx",[],"D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Utils\\handlePathname.ts",[],"D:\\Web_design\\Node_JS\\Ideas\\Todo_GIT\\client\\src\\Entries\\EntriesItem\\EntriesItem.tsx",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":64,"column":6,"nodeType":"51","endLine":64,"endColumn":8,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":194,"column":57,"nodeType":"55","messageId":"56","endLine":194,"endColumn":59},{"ruleId":"57","severity":1,"message":"58","line":5,"column":10,"nodeType":"59","messageId":"60","endLine":5,"endColumn":18},{"ruleId":"57","severity":1,"message":"61","line":36,"column":11,"nodeType":"59","messageId":"60","endLine":36,"endColumn":19},{"ruleId":"53","severity":1,"message":"62","line":40,"column":36,"nodeType":"55","messageId":"56","endLine":40,"endColumn":38},{"ruleId":"53","severity":1,"message":"62","line":32,"column":43,"nodeType":"55","messageId":"56","endLine":32,"endColumn":45},{"ruleId":"53","severity":1,"message":"63","line":33,"column":49,"nodeType":"64","messageId":"65","endLine":33,"endColumn":56},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getEntries'. Either include it or remove the dependency array.","ArrayExpression",["68"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'location' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [getEntries]",{"range":"71","text":"72"},[1830,1832],"[getEntries]"]